setwd("~/projects/telperian/collab-sites/amgen-trial-operations/prostate-mock-up")
rmarkdown:::themes()
knitr::opts_chunk$set(echo = TRUE)
library(ctrialsgov)
library(ctrialsgovtools)
library(RPostgreSQL)
library(dplyr)
library(purrr)
library(tidyr)
#library(tibblefiddle) # remotes::install_github("kaneplusplus/tibblefiddle")
library(ggplot2)
drv <- dbDriver('PostgreSQL')
con <- dbConnect(drv, dbname="aact")
ctgov_create_data(con)
ptp <- prostate_trials %>%
filter(primary_completion_date >= Sys.Date()) %>%
nest(data = -phase)
prostate_trials <-
ctgov_query(
study_type = "Interventional",
sponsor_type = "INDUSTRY",
conditions_kw = c("prostate", "prostatic")
) %>%
filter(grepl("carcinoma|cancer", conditions, ignore.case = TRUE)) %>%
filter(phase != "Not Applicable")
ptp <- prostate_trials %>%
filter(primary_completion_date >= Sys.Date()) %>%
nest(data = -phase)
ptp
ptp$data[[1]]
make_href <- function(nct_id) {
sprintf("<a href='https://clinicaltrials.gov/ct2/show/%s>%s</a>", nct_id, nct_id)
}
ptp <- prostate_trials %>%
mutate(nct_id = make_href(nct_id))
ptp$data[[1]]$nct_id[1]
ptp <- prostate_trials %>%
mutate(nct_id = make_href(nct_id))
filter(primary_completion_date >= Sys.Date()) %>%
nest(data = -phase)
ptp <- prostate_trials %>%
mutate(nct_id = make_href(nct_id)) %>%
filter(primary_completion_date >= Sys.Date()) %>%
nest(data = -phase)
ptp$data[[1]]$nct_id[1]
make_href <- function(nct_id) {
sprintf("<a href='https://clinicaltrials.gov/ct2/show/%s'>%s</a>", nct_id, nct_id)
}
ptp <- prostate_trials %>%
mutate(nct_id = make_href(nct_id)) %>%
filter(primary_completion_date >= Sys.Date()) %>%
nest(data = -phase)
ptp$data[[1]]$nct_id[1]
ptp
ptp %>% arrange(phase)
ptp <- prostate_trials %>%
mutate(nct_id = make_href(nct_id)) %>%
filter(primary_completion_date >= Sys.Date()) %>%
nest(data = -phase) %>%
arrange(phase)
ptp
ptp$data[[1]]
tab_cols <- c("nct_id", "brief_title", "start_date", "rec_status")
ptp$data[[1]] %>%
select(!!tab_cols) %>%
datatable(options = list(scrollX = TRUE), escape = FALSE)
library(DT)
library(DT)
ptp$data[[1]] %>%
select(!!tab_cols) %>%
datatable(options = list(scrollX = TRUE), escape = FALSE)
ptp$data[[1]] %>%
select(!!tab_cols) %>%
datatable(options = list(scrollX = TRUE), escape = FALSE)
ptp$data[[1]] %>%
select(!!tab_cols) %>%
datatable(options = list(scrollX = TRUE), escape = FALSE) %>% print()
ptp
?library
prostate_trials <-
ctgov_query(
study_type = "Interventional",
sponsor_type = "INDUSTRY",
conditions_kw = c("prostate", "prostatic")
) %>%
filter(grepl("carcinoma|cancer", conditions, ignore.case = TRUE)) %>%
filter(phase != "Not Applicable")
ctgov_save_file("prostate-trials.rds")
ctgov_load_file("prostate-trials.rds")
library(ctrialsgov)
library(ctrialsgovtools)
library(RPostgreSQL)
library(dplyr)
library(purrr)
library(tidyr)
#library(tibblefiddle) # remotes::install_github("kaneplusplus/tibblefiddle")
library(ggplot2)
library(DT)
drv <- dbDriver('PostgreSQL')
con <- dbConnect(drv, dbname="aact")
ctgov_create_data(con, verbose = FALSE)
library(ctrialsgov)
library(ctrialsgovtools)
library(RPostgreSQL)
library(dplyr)
library(purrr)
library(tidyr)
#library(tibblefiddle) # remotes::install_github("kaneplusplus/tibblefiddle")
library(ggplot2)
library(DT)
have_rds <- TRUE
if (!have_rds) {
drv <- dbDriver('PostgreSQL')
con <- dbConnect(drv, dbname="aact")
ctgov_create_data(con, verbose = FALSE)
prostate_trials <-
ctgov_query(
study_type = "Interventional",
sponsor_type = "INDUSTRY",
conditions_kw = c("prostate", "prostatic")
) %>%
filter(grepl("carcinoma|cancer", conditions, ignore.case = TRUE)) %>%
filter(phase != "Not Applicable")
ctgov_save_file("prostate-trials.rds")
} else {
ctgov_load_file("prostate-trials.rds")
}
knitr::opts_chunk$set(echo = TRUE)
library(ctrialsgov)
library(ctrialsgovtools)
library(RPostgreSQL)
library(dplyr)
library(purrr)
library(tidyr)
#library(tibblefiddle) # remotes::install_github("kaneplusplus/tibblefiddle")
library(ggplot2)
library(DT)
have_rds <- TRUE
if (!have_rds) {
drv <- dbDriver('PostgreSQL')
con <- dbConnect(drv, dbname="aact")
ctgov_create_data(con, verbose = FALSE)
prostate_trials <-
ctgov_query(
study_type = "Interventional",
sponsor_type = "INDUSTRY",
conditions_kw = c("prostate", "prostatic")
) %>%
filter(grepl("carcinoma|cancer", conditions, ignore.case = TRUE)) %>%
filter(phase != "Not Applicable")
ctgov_save_file("prostate-trials.rds")
} else {
ctgov_load_file("prostate-trials.rds")
prostate_trials <-
ctgov_query(
study_type = "Interventional",
sponsor_type = "INDUSTRY",
conditions_kw = c("prostate", "prostatic")
) %>%
filter(grepl("carcinoma|cancer", conditions, ignore.case = TRUE)) %>%
filter(phase != "Not Applicable")
}
make_href <- function(nct_id) {
sprintf("<a href='https://clinicaltrials.gov/ct2/show/%s'>%s</a>", nct_id, nct_id)
}
ptp <- prostate_trials %>%
mutate(nct_id = make_href(nct_id)) %>%
filter(primary_completion_date >= Sys.Date()) %>%
nest(data = -phase) %>%
arrange(phase)
tab_cols <- c("nct_id", "brief_title", "start_date", "rec_status")
ptp %>%
mutate(`Num Trials` = map_dbl(data, nrow)) %>%
rename(Phase = phase) %>%
select(-data) %>%
datatable()
ptn <- prostate_trials %>%
nest(data = -phase) %>%
mutate(timeline = map(data, ~ ctgov_to_plotly(ctgov_plot_timeline_by_sponsor(.x))))
ptn
ptn <- prostate_trials %>%
nest(data = -phase) %>%
mutate(timeline = map(data, ~ ctgov_to_plotly(ctgov_plot_timeline_by_sponsor(.x)))) %>%
arrange(phase)
ptn
ptp
table(prostate_trials$phase)
ptp
prostate_trials[prostate_trials$phase == "Early Phase"]
prostate_trials[prostate_trials$phase == "Early Phase",]
prostate_trials[prostate_trials$phase == "Early Phase 1",]
ptp
ptn <- prostate_trials %>%
nest(data = -phase) %>%
filter(phase != "Early Phase 1") %>%
mutate(timeline = map(data, ~ ctgov_to_plotly(ctgov_plot_timeline_by_sponsor(.x)))) %>%
arrange(phase)
ptn
dir()
prostate_trials %>%
filter(primary_completion_date >= Sys.Date()) ->cu
cu[cu$sponsor == "Amgen"]
cu[cu$sponsor == "Amgen",]
prostate_trials %>%
group_by(phase) %>%
summarize(`Num Trials` = n())
prostate_trials %>%
group_by(phase) %>%
summarize(`Num Trials` = n()) %>%
rename(Phase = phase) %>%
filter(phase != "Early Phase 1") %>%
datatable()
prostate_trials %>%
group_by(phase) %>%
summarize(`Num Trials` = n()) %>%
rename(Phase = phase) %>%
filter(Phase != "Early Phase 1") %>%
datatable()
install.packages(c("gtsummary", "survminer", "survival"))
install.packages(c("gtsummary", "survminer", "survival"))
install.packages(c("gtsummary", "survminer", "survival", "tidyverse"))
install.packages(c("gtsummary", "survminer", "survival", "tidyverse"))
remotes::install_github("kaneplusplus/listdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("survminer")
install.packages("rticles")
install.packages("rticles")
library("ggplot2")
library("listdown")
library("gtsummary")
library("dplyr")
library("survival")
library("survminer")
library("rmarkdown")
library("gtsummary")
setwd("~/projects/listdown/inst/jss/supplemental-material")
library("ggplot2")
library("listdown")
data(anscombe)
computational_components <- list(
Linear = ggplot(anscombe, aes(x = x1, y = y1)) + geom_point(),
`Non Linear` = ggplot(anscombe, aes(x = x2, y = y2)) + geom_point(),
`Outlier Vertical`= ggplot(anscombe, aes(x = x3, y = y3)) +
geom_point(),
`Outlier Horizontal` =  ggplot(anscombe, aes(x = x4, y = y4)) +
geom_point())
ld_cc_dendro(computational_components)
saveRDS(computational_components, "comp-comp.rds")
ld <- listdown(load_cc_expr = readRDS("comp-comp.rds"),
package = "ggplot2")
ld
ld_write_file(ld_rmarkdown_header("Anscombe's Quartet",
author = "Francis Anscombe",
date = "1973"),
ld,
"anscome-example.rmd")
ld <- listdown(load_cc_expr = readRDS("comp-comp.rds"),
package = "ggplot2",
echo = FALSE)
ld_make_chunks(ld)[1:7]
computational_components$Data <- anscombe
saveRDS(computational_components, "comp-comp.rds")
ld_make_chunks(ld)[32:36]
ld <- listdown(load_cc_expr = readRDS("comp-comp.rds"),
package = c("ggplot2", "DT"),
decorator = list(data.frame = datatable))
ld_make_chunks(ld)[33:37]
comp_comp2 <- list(
Iris = iris,
Sepal.Length = list(
Sepal.Width = ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point(),
Petal.Length = ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point(),
Colored = list(
Sepal.Width = ggplot(iris,
aes(x = Sepal.Length, y = Sepal.Width,
color = Species)) + geom_point(),
Petal.Length = ggplot(iris,
aes(x = Sepal.Length, y = Petal.Length,
color = Species)) + geom_point())))
ld_cc_dendro(comp_comp2)
saveRDS(comp_comp2, "comp-comp2.rds")
ld <- listdown(load_cc_expr = readRDS("comp-comp2.rds"),
package = c("ggplot2", "DT", "purrr"),
decorator = list(ggplot = identity,
data.frame = datatable_no_search),
setup_expr = knitr::opts_chunk$set(echo = FALSE),
init_expr = {
datatable_no_search <- partial(datatable,
options = list(dom = 't'))
})
ld_make_chunks(ld)[2:14]
ld <- listdown(load_cc_expr = readRDS("comp-comp2.rds"),
package = c("ggplot2", "DT", "purrr"),
decorator_chunk_opts =
list(ggplot = list(fig.width = 100,
fig.height = 200)),
init_expr = {
datatable_no_search <- partial(datatable,
options = list(dom = 't'))
},
echo = FALSE)
ld_make_chunks(ld)[c(12:16, 19:24)]
comp_comp2$Iris <- ld_chunk_opts(comp_comp2$Iris, echo = TRUE)
saveRDS(comp_comp2, "comp-comp2.rds")
ld_make_chunks(ld)[12:16]
library("gtsummary")
library("dplyr")
library("survival")
library("survminer")
library("rmarkdown")
make_surv_cc <- function(trial, treat, surv_cond_chars) {
table_1 <- trial %>%
tbl_summary(by = all_of(treat)) %>%
gtsummary::as_flex_table()
scs <- lapply(c("1", surv_cond_chars),
function(sc) {
sprintf("Surv(ttdeath, death) ~ %s + %s", treat, sc) %>%
as.formula() %>%
surv_fit(trial) %>%
ggsurvplot()
})
names(scs) <- c("Overall", tools::toTitleCase(surv_cond_chars))
list(`Table 1` = table_1, `Survival Plots` = scs)
}
surv_cc <- make_surv_cc(trial, treat = "trt",
surv_cond_chars = c("stage", "grade"))
install.packages("flextable")
install.packages("gdtools")
install.packages("systemfonts")
install.packages("systemfonts")
install.packages("flextable")
install.packages("rticles")
install.packages("rticles")
install.packages("tinytex")
tinytex::tlmgr_update()
tinytex::tlmgr_update()
tinytex::tlmgr_update()
